#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# dotfiles_install
# Description: Links dotfiles and creates necessary directories user install
# -----------------------------------------------------------------------------
# Requires:
#   
# -----------------------------------------------------------------------------
# Useage:      $ sh ./dotfiles_install
# -----------------------------------------------------------------------------


set -e

# Define colors
bc=$(tput bold)	    # bold
c0=$(tput setaf 0)  # black
c1=$(tput setaf 1)  # red
c2=$(tput setaf 2)  # green
c3=$(tput setaf 3)  # yellow
c4=$(tput setaf 4)  # blue
c5=$(tput setaf 5)  # magenta
c6=$(tput setaf 6)  # cyan
c7=$(tput setaf 7)  # white
rc=$(tput sgr0)	    # reset

# Define Directories
dotfiles="${HOME}/.dotfiles"
config="${HOME}/.config"

link() {
    echo -n "${c7}Link${rc} ${c6}${1}${rc}${c7}? (y/n)${rc}${c7}:${rc} "
    read -n 1 response
    echo ''
    if [[ "$response" == "y" ]]; then
        echo -n "${bc}${c5}Symbolically linking${rc} ${c3}${2}${rc} ${c7}to${rc} ${c3}${3}${rc} ${c7}...${rc} "
        ln -s "$2" "$3"
        echo "${bc}${c2}done${rc}"
    elif [[ "$response" == "n" ]]; then
        echo "${bc}${c5}Skipping${rc}"
    else
        echo "${c1}Error:${rc} ${bc}${c2}y(es)${rc} ${c7}or${rc} ${bc}${c1}n(o)${rc} ${c7}accepted${rc}"
        link $1 $2 $3
    fi
}

# make .config directory if does not exist
if [[ ! -d "${config}" ]]; then
    mkdir -p ${config}
fi

# link $name $location $destination
link 'git' "${dotfiles}/git/gitconfig" "${HOME}/.gitconfig"
link 'bin' "${dotfiles}/bin/" "${HOME}/.bin"
link 'bspwm' "${dotfiles}/bspwm/" "${config}/bspwm"
link 'compton' "${dotfiles}/compton/compton.conf" "${HOME}/.compton.conf"
link 'gtk' "${dotfiles}/gtk/" "${config}/gtk-3.0"
link 'gtk' "${dotfiles}/irssi/" "${HOME}/.irssi"
link 'mpd' "${dotfiles}/mpd/" "${config}/mpd"
link 'mpv' "${dotfiles}/mpv/" "${config}/mpv"
link 'ncmpcpp' "${dotfiles}/ncmpcpp/" "${HOME}/.ncmpcpp"
link 'ranger' "${dotfiles}/ranger/" "${config}/ranger"
link 'stalonetray' "${dotfiles}/stalonetray/stalonetrayrc" "${HOME}/.stalonetrayrc"
link 'sxhkd' "${dotfiles}/sxhkd/" "${config}/sxhkd"
link 'tmux' "${dotfiles}/tmux/tmux.conf" "${HOME}/.tmux.conf"
link 'vim' "${dotfiles}/vim/" "${HOME}/.vim"
link 'vimrc' "${dotfiles}/vim/vimrc" "${HOME}/.vimrc"
link 'vimperator' "${dotfiles}/vimperator/" "${HOME}/.vimperator"
link 'vimperatorrc' "${dotfiles}/vimperator/vimperatorrc" "${HOME}/.vimperatorrc"
link 'xinitrc' "${dotfiles}/xorg/xinitrc" "${HOME}/.xinitrc"
link 'Xresources' "${dotfiles}/xorg/Xresources" "${HOME}/.Xresources"
link 'zsh' "${dotfiles}/zsh/" "${HOME}/.zsh"
link 'zshrc' "${dotfiles}/zsh/zshrc" "${HOME}/.zshrc"
link 'zprofile' "${dotfiles}/zsh/zprofile" "${HOME}/.zprofile"
link 'zlogin' "${dotfiles}/zsh/zlogin" "${HOME}/.zlogin"
link 'zlogout' "${dotfiles}/zsh/zlogout" "${HOME}/.zlogout"

# git
echo -n "Updating git submodules ... "
cd $dotfiles && git submodule update --init --recursive
cd -
echo "done"

# mpd
if [[ -d "${config}/mpd" ]]; then
    echo -n "Creating mpd playlist directory ... "
    mkdir -p ${config}/mpd/playlists
    echo "done"
    echo -n "Touching mpd files ... "
    touch ${config}/mpd/{database,log,pid,state,sticker.sql}
    echo "done"
fi

# ncmpcpp
if [[ -d "${HOME}/.ncmpcpp" ]]; then
    echo -n "Creating ncmpcpp lyrics directory ... "
    mkdir -p ${HOME}/.ncmpcpp/lyrics
    echo "done"
fi

# Vim Plugin manager
echo -n "Downloading vim-plug ... "
curl -sfLo ${HOME}/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
echo "done"

# user dirs
echo -n "Creating user home directories ..."
mkdir -p "${HOME}/documents/local"
mkdir -p "${HOME}/downloads/local"
mkdir -p "${HOME}/music/local"
mkdir -p "${HOME}/pictures/local"
mkdir -p "${HOME}/videos/local"
echo "done"

echo ""
echo "${bc}${c3}Install complete!${rc}"
echo ""

exit 0
