#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# fave
# Description: Adds/removes current song to a favorites file or prints
#   favorites file to stdout
# -----------------------------------------------------------------------------
# Useage:      $ ./fave
# -----------------------------------------------------------------------------

# favorites file
readonly fave_file="$HOME/music/.faves"

function song_info() {
    # get individual mpc current fields for formatting
    local artist=$( mpc -f "[%artist%]" | head -n 1 )
    local title=$( mpc -f "[%title%]" | head -n 1 )
    local album=$( mpc -f "[%album%]" | head -n 1 )

    # has artist, title and album
    if [[ -n "${artist}" && -n "${title}" && -n "${album}" ]]; then
        echo "${artist} - ${title} - ${album}"

        # has artist and title but not album
    elif [[ -n "${artist}" && -n "${title}" ]]; then
        echo "${artist} - ${title}"

        # has artist and album but not title
    elif [[ -n "${artist}" && -n "${album}" ]]; then
        echo "${artist} - ${album}"

        # has title and album but not artist
    elif [[ -n "${title}" && -n "${album}" ]]; then
        echo "${title} - ${album}"

        # has only artist
    elif [[ -n "${artist}" ]]; then
        echo "${artist}"

        # has only title
    elif [[ -n "${title}" ]]; then
        echo "${title}"

        # has only album
    elif [[ -n "${album}" ]]; then
        echo "${album}"
    fi
}

function fave_add() {
    # file to operate on
    local target="$1"
    # get current song
    local current_song=$( song_info )

    # check for empty current_song
    if [[ -z "${current_song}" ]]; then
        echo "All fields of current song empty. Exiting." >&2
        exit 1
    fi

    # check if current song is not favorited
    if ! grep -Fq "${current_song}" "${target}"; then
        # append current song to target
        echo "${current_song}" >> "${target}"

        # check if current song was added successfully to target file
        if [[ $? -eq 0 ]]; then
            echo "'${current_song}' -> '${target}'"
        else
            echo "Could not add '${current_song}' to '${target}'!" >&2
            exit 1
        fi
    else
        echo "'${current_song}' is already favorited!"
    fi
}

function fave_remove() {
    # file to operate on
    local target="$1"
    # get current song
    local current_song=$( song_info )

    # check for empty current_song
    if [[ -z "${current_song}" ]]; then
        echo "All fields of current song empty. Exiting." >&2
        exit 1
    fi

    # check if current song is favorited
    if grep -Fq "${current_song}" "${target}"; then
        # print all lines except current song to target.tmp
        grep -Fv "${current_song}" "${target}" > "${target}.tmp"
        # overwrite target with target.tmp
        mv "${target}.tmp" "${target}"

        # check if temp file successfuly overwrote target file
        if [[ $? -eq 0 ]]; then
            echo "rm '${current_song}'"
        else
            echo "Unable to move '${target}.tmp' to '${target}'!" >&2
            # target was not overwritten so delete the temp file
            rm "${target}.tmp" || echo "Count not remove '${target}.tmp'!" >&2
            exit 1
        fi
    else
        echo "'${current_song}' is not favorited!"
    fi
}

function fave_list() {
    # file to operate on
    local target="$1"

    # print target file to stdout
    cat "${target}"
}

# check for favorites file; create if not found
if [[ ! -e "${fave_file}" ]]; then
    touch "${fave_file}" || { echo "Could not create '${fave_file}!'" >&2; exit 1; }
    echo "Tracking favorite songs in '${fave_file}'"
fi

case $1 in
    # add current song to target file
    "")
    fave_add "${fave_file}"
    ;;
    # remove current song from target file
    "rm")
    fave_remove "${fave_file}"
    ;;
    # print target file
    "ls")
    fave_list "${fave_file}"
    ;;
    # incorrect syntax
    *)
    echo 'Incorrect usage: fave [rm,ls]' >&2
    exit 2
    ;;
esac
