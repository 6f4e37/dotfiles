#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# music
# Description: Displays status item showing information about mpd server
# -----------------------------------------------------------------------------
# Requires:
#   mpd / mpc
#   xftwidth
#   dzen
# -----------------------------------------------------------------------------
# Usage:      $ ./music
# -----------------------------------------------------------------------------

# Source color theme
source "$HOME/.bin/ui/colors"

# Source monitors
source "$HOME/.bin/ui/menu_bar/status_items/monitor"

# provides function new_module(): creates module temp files
#   module_type, name --> void
#   Modifies module array, creates module temp files
# provides function free_module(): User must call on cleanup
#   void --> void
#   removes module temp files
# provides function get_module_type(), get_module_name(), get_module_directory(),
#   get_module_stream() which return module parameters
#   void --> string
source "$HOME/.bin/ui/menu_bar/status_items/module"

# provides function update_status_item: draws a persistent status_item using dzen
#   name, x, y, width, height, stream, font, color_fg, color_bg --> void
#   Modifies status_item array
# provides function free_status_item(): User must call on cleanup
#   void --> void
#   kills status_item['pid']
source "$HOME/.bin/ui/menu_bar/status_items/status_item"

function set_defaults() {
    # create new module with type 'status_item' and name 'date'
    new_module 'status_item' 'mpd'

    # set status item name and stream
    set_status_item_name "$(get_module_name)"
    set_status_item_stream "$(get_module_stream)"

    # set default status item geometry
    select_monitor 'default'
    set_status_item_monitor "$(get_monitor_num)"
    set_status_item_x '0'
    set_status_item_y '20'
    set_status_item_width '0'
    set_status_item_height '40'

    # set status item font and colors
    set_status_item_font 'Source Code Pro:size=7'
    set_status_item_color_fg "$(get_color_lightgrey)"
    set_status_item_color_bg "$(get_color_black)"
}

# sets content
#   color_fg, color_bg --> void
#   Modifies content array
# TODO: add bg formatting
function set_content() {
    # set colors
    local color_fg="$(get_status_item_color_fg)"
    local color_artist="$(get_color_blue)"
    local color_title="$(get_color_yellow)"
    local color_album="$(get_color_lightgrey)"

    # nothing is currently playing or paused
    if [[ -z "$(mpc current)" ]]; then
        set_status_item_unformatted 'Playlist Empty'
        set_status_item_formatted "^fg(${color_fg})Playlist Empty"

    # something is playing or paused
    else
        # get individual mpc current fields for formatting
        local artist=$( mpc -f "[%artist%]" | head -n 1 )
        local title=$( mpc -f "[%title%]" | head -n 1 )
        local album=$( mpc -f "[%album%]" | head -n 1 )

        # has artist, title and album
        if [[ -n "${artist}" && -n "${title}" && -n "${album}" ]]; then
            set_status_item_unformatted "${artist} - ${title} - ${album}"
            set_status_item_formatted "^fg(${color_artist})${artist}^fg(${color_fg}) - ^fg(${color_title})${title}^fg(${color_fg}) - ^fg(${color_album})${album}"

            # has artist and title but not album
        elif [[ -n "${artist}" && -n "${title}" ]]; then
            set_status_item_unformatted "${artist} - ${title}"
            set_status_item_formatted "^fg(${color_artist})${artist}^fg(${color_fg}) - ^fg(${color_title})${title}"

            # has artist and album but not title
        elif [[ -n "${artist}" && -n "${album}" ]]; then
            set_status_item_unformatted "${artist} - ${album}"
            set_status_item_formatted "^fg(${color_artist})${artist}^fg(${color_fg}) - ^fg(${color_album})${album}"

            # has title and album but not artist
        elif [[ -n "${title}" && -n "${album}" ]]; then
            set_status_item_unformatted "${title} - ${album}"
            set_status_item_formatted "^fg(${color_title})${title}^fg(${color_fg}) - ^fg(${color_album})${album}"

            # has only artist
        elif [[ -n "${artist}" ]]; then
            set_status_item_unformatted "${artist}"
            set_status_item_formatted "^fg(${color_artist})${artist}"

            # has only title
        elif [[ -n "${title}" ]]; then
            set_status_item_unformatted "${title}"
            set_status_item_formatted "^fg(${color_title})${title}"

            # has only album
        elif [[ -n "${album}" ]]; then
            set_status_item_unformatted "${album}"
            set_status_item_formatted "^fg(${color_album})${album}"

            # no artist, title or album
        else
            set_status_item_unformatted 'Unknown'
            set_status_item_formatted "^fg(${color_fg})Unknown"
        fi
    fi
}

function set_geometry() {
    # calculate position
    local monitor_width="$(get_monitor_width)"
    local font="$(get_status_item_font)"
    local content="$(get_status_item_unformatted)"
    local width=$(xftwidth "${font}" "-${content}-")
    local height="$(get_status_item_height)"
    local xposition="$(get_monitor_xpadding)"
    local yposition="$(get_status_item_y)"

    # update status item geometry
    update_status_item_geometry "${xposition}" "${yposition}" "${width}" "${height}"
}

# run on EXIT
function finish() {
    # kill the status_item
    free_status_item

    # remove temp files
    free_module
}

function main() {
    # set var defaults
    set_defaults

    while
        :
    do
        # update content to be displayed
        set_content

        # update status item geometry
        set_geometry

        # pipe to stream
        pipe_content_to_stream

        # wait for mpd player event
        mpc idle player >/dev/null
    done
}
# cleanup on exit
trap finish EXIT

# main
main "$@"
