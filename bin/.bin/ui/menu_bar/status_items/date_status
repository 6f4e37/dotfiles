#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# clock
# Description: Displays status item showing information about time
# -----------------------------------------------------------------------------
# Requires:
#   xftwidth
#   dzen
# -----------------------------------------------------------------------------
# Useage:      $ sh ./clock
# -----------------------------------------------------------------------------

# Source color theme which defines color_{0-15}
source "$HOME/.bin/ui/colors"

# name of the panel
readonly panel_name='date_status_item'
# panel font
readonly panel_font='Source Code Pro:size=7'
# panel fg / bg color
readonly color_fg="${color_lightgrey}"
readonly color_bg="${color_black}"

# make a temporary directory to store panel fifo
readonly temp_dir=$( mktemp -p "${TMPDIR}" -d "${panel_name}-XXXX" ) || exit 1
# name fifo after panel_name
readonly fifo="${temp_dir}/${panel_name}.fifo"

# associative array with information about current text
declare -A text
text=( ["format"]="" ["width"]="" )
# associative array with information about panel
declare -A panel
panel=( ["pid"]="" ["width"]="" )

# Updates the text array to have a formatted info and the correct xft width
function update_text() {
    # set colors
    local color_weekday="${color_lightgrey}"
    local color_date="${color_blue}"
    local color_time="${color_yellow}"
    local color_ampm="${color_lightgrey}"

    # update text array
    text["format"]=$( date +"^fg(${color_weekday})%A ^fg(${color_date})%d ^fg(${color_time})%I^fg(${color_fg}):^fg(${color_time})%M ^fg(${color_ampm})%p" )
    text["width"]=$( xftwidth "${panel_font}" "$(date +'-%A %d %I:%M %p-')" )
}

function update_panel() {
    # panel geometry
    local panel_x="$(( 1440 - ${text['width']} / 2 ))"
    local panel_y='20'
    local panel_width="${text['width']}"
    local panel_height='40'
    # panel x parameters
    local panel_layer='lower'
    local panel_monitor='1'

    # dzen title
    local dzen_args=( '-title-name' "${panel_name}" )
    # dzen geometry
    dzen_args+=( '-x' "${panel_x}" '-y' "${panel_y}" '-w' "${panel_width}" '-h' "${panel_height}" )
    # dzen font
    dzen_args+=( '-fn' "${panel_font}" '-ta' 'c' '-fg' "${color_fg}" '-bg' "${color_bg}" )
    # dzen x parameters
    dzen_args+=( '-e' "onstart=${panel_layer}" '-xs' "${panel_monitor}" )

    # no panel running yet
    if [[ -z "${panel['pid']}" ]]; then
        # create new panel with current width
        tail -f "${fifo}" > >(dzen2 "${dzen_args[@]}") &

        # update panel info
        panel['pid']=$(echo $!)
        panel['width']=$(echo "${text['width']}")

    # panel is running but doesn't have the correct width
    elif [[ "${panel['width']}" != "${text['width']}" ]]; then
        # kill oldpanel
        kill "${panel['pid']}"

        # create new panel with current width
        tail -f "${fifo}" > >(dzen2 "${dzen_args[@]}") &

        # update panelinfo
        panel['pid']=$(echo $!)
        panel['width']=$(echo "${text['width']}")
    fi
}

function finish() {
    # kill the panel
    kill "${panel['pid']}"

    # remove the fifo
    rm "${fifo}"

    # remove temp fifo dir
    rmdir "${temp_dir}"
}

function main() {
    while
        :
    do
        # make the fifo
        if [[ ! -p "${fifo}" ]]; then
            mkfifo "${fifo}" || exit 1
        fi

        # update text array
        update_text

        # update panel array
        update_panel

        # pipe to fifo
        echo "${text['format']}" >"${fifo}"

        # wait for 1 minute
        sleep 60
    done
}

# cleanup on exit
trap finish EXIT

# main
main "$@"
