#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# clock
# Description: Displays status item showing information about time
# -----------------------------------------------------------------------------
# Requires:
#   xftwidth
#   dzen
# -----------------------------------------------------------------------------
# Useage:      $ sh ./clock
# -----------------------------------------------------------------------------

# type and name the module
declare -A module
module['type']='status_item'
module['name']='date'

# make a directory to store temporary files
readonly temp_dir=$( mktemp -p "${TMPDIR}" -d "${USER}_${module['type']}_${module['name']}-XXXX" ) || exit 1
# name fifo after module name and store in temp_dir
readonly fifo="${temp_dir}/${module['name']}.fifo"

# Source color theme
source "$HOME/.bin/ui/colors"

# provides function update_status_item that draws a persistent status_item using dzen
#   name, x, y, width, height, stream, font, color_fg, color_bg --> void
#   Modifies status_item array
#   User must kill status_item['pid'] on cleanup
source "$HOME/.bin/ui/menu_bar/status_items/update_status_item"

# associative array for storing content to be displayed
declare -A content

# Updates date
#   color_fg, color_bg --> void
#   Modifies content array
# TODO: add bg formatting
function update_content() {
    # set colors
    local color_fg="$1"
    local color_weekday="${color_lightgrey}"
    local color_date="${color_blue}"
    local color_time="${color_yellow}"
    local color_ampm="${color_lightgrey}"

    # update text array
    content["raw"]="$(date +'%A %d %I:%M %p')"
    content["formatted"]=$( date +"^fg(${color_weekday})%A ^fg(${color_date})%d ^fg(${color_time})%I^fg(${color_fg}):^fg(${color_time})%M ^fg(${color_ampm})%p" )
}

function finish() {
    # kill the status_item
    kill "${status_item['pid']}"

    # remove the fifo
    rm "${fifo}"

    # remove temp fifo dir
    rmdir "${temp_dir}"
}

function main() {
    # monitor settings
    declare -A monitor
    monitor['width']='2880'
    monitor['height']='1800'
    monitor['padding']='40'

    # default x geometry
    declare -A geometry
    geometry['x']='0'
    geometry['y']='20'
    geometry['width']='0'
    geometry['height']='40'

    # default colors and font
    local font='Source Code Pro:size=7'
    declare -A color
    color['fg']="${color_lightgrey}"
    color['bg']="${color_black}"

    while
        :
    do
        # make the fifo
        if [[ ! -p "${fifo}" ]]; then
            mkfifo "${fifo}" || exit 1
        fi

        # modifies ${content['raw']} and ${content['formatted']}
        # color_fg, color_bg --> void
        update_content "${color['fg']}" "${color['bg']}"
        # update width and x_pos to reflect content
        geometry['width']=$(xftwidth "${font}" "-${content['raw']}-")
        geometry['x']="$(( (${monitor['width']} - ${geometry['width']}) / 2 ))"

        # modifies ${status_item[@]}
        # name, x, y, width, height, stream, font, color_fg, color_bg --> void
        update_status_item \
            "${module['type']}_${module['name']}" \
            "${geometry['x']}" "${geometry['y']}" "${geometry['width']}" "${geometry['height']}" \
            "${fifo}" "${font}" "${color['fg']}" "${color['bg']}"

        # pipe to fifo
        echo "${content['formatted']}" >"${fifo}"

        # wait for 1 minute
        sleep 60
    done
}

# cleanup on exit
trap finish EXIT

# main
main "$@"
