#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# external_monitor
# Description: enables or disables external monitor with given args
# -----------------------------------------------------------------------------
# Useage:      $ ./external_monitor
# -----------------------------------------------------------------------------

primary_monitor='eDP-1'
primary_monitor_args=( '--mode' '2880x1800' )

external_monitor='HDMI-3'
external_monitor_args=( '--mode' '1920x1080' '--rotate' 'left' '--right-of' "${primary_monitor}" )

function enable_external_monitor() {
    # turn on external monitor
    xrandr --output "${external_monitor}" "${external_monitor_args[@]}"

    # rename monitor to 2
    bspc monitor "${external_monitor}" -n 2

    # add desktops 6 - 10 to monitor 2
    bspc monitor 2 -d 6 7 8 9 10

    # set monitor 2 padding
    bspc config -m 2 window_gap 0
    bspc config -m 2 top_padding 0
}

function disable_external_monitor() {
    # close all nodes on external
    for node_id in $(bspc query -N -m 2); do
        bspc node $node_id -c
        echo "$node_id removed"
    done

    # bspwm removes monitors automatically
    xrandr --output "${external_monitor}" --off

    # remove the desktops added to monitor 1
    bspc monitor 1 -d 1 2 3 4 5
    bspc config -m 1 window_gap 40
    bspc config -m 1 top_padding 40
}

function main() {
    local external_monitor_status=$(xrandr --query | grep "${external_monitor} connected")

    # check if $monitor_external is connected
    if [[ -z "${external_monitor_status}" ]]; then
        exit 1
    fi

    case $1 in
        # add current song to target file
        "enable")
        enable_external_monitor
        ;;
        # remove current song from target file
        "disable")
        disable_external_monitor
        ;;
        # incorrect syntax
        *)
        echo 'Incorrect usage: monitor {enable/disable}' >&2
        exit 2
        ;;
    esac
}

main "$@"
