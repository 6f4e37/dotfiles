#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# music
# Description: Displays status item showing information about mpd server
# -----------------------------------------------------------------------------
# Requires:
#   mpd / mpc
#   xftwidth
#   dzen
# -----------------------------------------------------------------------------
# Usage:      $ ./music
# -----------------------------------------------------------------------------

# Source color theme which defines color_{0-15}
source "$HOME/.dotfiles/bin/wm/colors"

# set local colors
color_fg="${color_lightgrey}"
color_bg="${color_black}"
color_artist="${color_blue}"
color_title="${color_yellow}"
color_album="${color_lightgrey}"

# name of the panel
panel_name='mpd_status_item'

# panel font
panel_font='Source Code Pro:size=7'

# panel layer
panel_layer='lower'

# panel height
panel_height='40'

# fifo
pipe="/tmp/${panel_name}.fifo"

# associative array with information about current text
declare -A text
text=( ["format"]="" ["width"]="" )

# associative array with information about panel
declare -A panel
panel=( ["pid"]="" ["width"]="" )

function finish() {
    # kill the panel
    kill "${panel['pid']}"

    # remove the fifo
    rm -f "${pipe}"
}

# Updates the text array to have a formatted info and the correct xft width
function update_text() {
    # nothing is currently playing or paused
    if [[ -z "$(mpc current)" ]]; then
        text["format"]="^fg(${color_fg})Playlist Empty"
        text["width"]=$( xftwidth 'Source Code Pro:size=7' '-Playlist Empty-' )

    # something is playing or paused
    else
        # get individual mpc current fields for formatting
        local artist=$( mpc -f "[%artist%]" | head -n 1 )
        local title=$( mpc -f "[%title%]" | head -n 1 )
        local album=$( mpc -f "[%album%]" | head -n 1 )

        # has artist, title and album
        if [[ -n "${artist}" && -n "${title}" && -n "${album}" ]]; then
            text["format"]="^fg(${color_artist})${artist}^fg(${color_fg}) - ^fg(${color_title})${title}^fg(${color_fg}) - ^fg(${color_album})${album}"
            text["width"]=$( xftwidth 'Source Code Pro:size=7' "-${artist} - ${title} - ${album}-" )

        # has artist and title but not album
        elif [[ -n "${artist}" && -n "${title}" ]]; then
            text["format"]="^fg(${color_artist})${artist}^fg(${color_fg}) - ^fg(${color_title})${title}"
            text["width"]=$( xftwidth 'Source Code Pro:size=7' "-${artist} - ${title}-" )

        # has artist and album but not title
        elif [[ -n "${artist}" && -n "${album}" ]]; then
            text["format"]="^fg(${color_artist})${artist}^fg(${color_fg}) - ^fg(${color_album})${album}"
            text["width"]=$( xftwidth 'Source Code Pro:size=7' "-${artist} - ${album}-" )

        # has title and album but not artist
        elif [[ -n "${title}" && -n "${album}" ]]; then
            text["format"]="^fg(${color_title})${title}^fg(${color_fg}) - ^fg(${color_album})${album}"
            text["width"]=$( xftwidth 'Source Code Pro:size=7' "-${title} - ${album}-" )

        # has only artist
        elif [[ -n "${artist}" ]]; then
            text["format"]="^fg(${color_artist})${artist}"
            text["width"]=$( xftwidth 'Source Code Pro:size=7' "-${artist}-" )

        # has only title
        elif [[ -n "${title}" ]]; then
            text["format"]="^fg(${color_title})${title}"
            text["width"]=$( xftwidth 'Source Code Pro:size=7' "-${title}-" )

        # has only album
        elif [[ -n "${album}" ]]; then
            text["format"]="^fg(${color_album})${album}"
            text["width"]=$( xftwidth 'Source Code Pro:size=7' "-${album}-" )

        # no artist, title or album
        else
            text["format"]="^fg(${color_fg})Unknown"
            text["width"]=$( xftwidth 'Source Code Pro:size=7' '-Unknown-' )
        fi
    fi
}

function update_panel() {
    # parameters for spawned dzen
    local dzen_args=( -title-name "${panel_name}" -ta c -fn "${panel_font}" -e "onstart=${panel_layer}" -x '40' -y '20' -h "${panel_height}" -bg "${color_bg}")

    # no panel running yet
    if [[ -z "${panel['pid']}" ]]; then
        # create new panel with current width
        tail -f "${pipe}" > >(dzen2 "${dzen_args[@]}" -w "${text['width']}") &

        # update panel info
        panel['pid']=$(echo $!)
        panel['width']=$(echo "${text['width']}")

    # panel is running but doesn't have the correct width
    elif [[ "${panel['width']}" != "${text['width']}" ]]; then
        # kill oldpanel
        kill "${panel['pid']}"

        # create new panelwith current width
        tail -f "${pipe}" > >(dzen2 "${dzen_args[@]}" -w "${text['width']}") &

        # update panelinfo
        panel['pid']=$(echo $!)
        panel['width']=$(echo "${text['width']}")
    fi
}

# cleanup on exit
trap finish EXIT

while
    :
do
    # make the fifo
    if [[ ! -p "${pipe}" ]]; then
        mkfifo "${pipe}"
    fi

    # update text array
    update_text

    # update panel array
    update_panel

    # pipe to fifo
    echo "${text['format']}" >"${pipe}"

    # wait for mpd player event
    mpc idle player >/dev/null
done
