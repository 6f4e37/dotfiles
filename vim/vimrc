""" vimconf is not vi-compatible {
    set nocompatible
""" }
""" vundle plugin manager {
    filetype off                            " required to init
    set rtp+=~/.vim/bundle/Vundle.vim       " include vundle
    call vundle#begin()                     " init vundle

    " vundle
    Plugin 'gmarik/Vundle.vim'

    " statusline
    Plugin 'bling/vim-airline.git'
    " Plugin 'itchyny/lightline.vim'
    " Plugin 'bling/vim-bufferline'

    let g:airline_theme='lucius'
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1

    " fuzzy finder
    Plugin 'kien/ctrlp.vim'

    let g:ctrlp_clear_cache_on_exit = 0
    let g:ctrlp_working_path_mode = 'ra'

    " file tree
    Plugin 'scrooloose/nerdtree.git'

    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
    map <C-n> :NERDTreeToggle<CR>
    let NERDTreeShowHidden=1
    let NERDTreeIgnore=['\.png$', '\.jpg$', '\.gif$', '\.tmp$', '\.swp$']

    " undo tree
    Plugin 'vim-scripts/Gundo.git'

    nnoremap <F5> :GundoToggle<CR>

    " <Tab> everything
    Plugin 'ervandew/supertab'

    " universal set of defaults
    Plugin 'tpope/vim-sensible.git'

    " extended tpope vimrc
    Plugin 'tpope/vim-unimpaired.git'

    " git wrapper
    Plugin 'tpope/vim-fugitive.git'

    " gists
    Plugin 'mattn/gist-vim.git'

    " repeat everything
    Plugin 'tpope/vim-repeat.git'

    " end structures automatically
    Plugin 'tpope/vim-endwise.git'

    " working with variants of a word
    Plugin 'tpope/vim-abolish.git'

    " surroundings
    Plugin 'tpope/vim-surround.git'

    " super commenter
    Plugin 'scrooloose/nerdcommenter.git'

    " align everything
    Plugin 'vim-scripts/Align'

    " racket language support
    Plugin 'wlangstroth/vim-racket.git'

    command Racket !drracket %

    " check syntax
    Plugin 'scrooloose/syntastic.git'

    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0

    " end plugin call
    call vundle#end()
""" }
""" user interface {
    """ syntax highlighting {
        filetype plugin indent on           " detec file plugin + indent
        syntax on                           " turn on syntax highlight
        set background=dark " we're using a dark bg
        colorscheme hybrid                  " colorscheme
        let g:hybrid_use_Xresources = 1     " let colorscheme use xresources
        set encoding=UTF-8
    """ }
    """ interface general {
        set cursorline                      " hilight cursor line
        set more                            " ---more--- like less
        set number                          " line numbers are good
        set scrolloff=8
        set sidescrolloff=15
        set sidescroll=1
        set showcmd                         " show cmds being typed
        set title                           " window title
        set vb t_vb=                        " disable beep and flashing
        set wildignore=*.a,*.o,*.so,*.pyc,*.jpg,
                    \*.jpeg,*.png,*.gif,*.pdf,*.git,
                    \*.swp,*.swo            " tab completion ignores

        set wildignore=*.o,*.obj,*~
        set wildignore+=*vim/backups*
        set wildignore+=*sass-cache*
        set wildignore+=*DS_Store*
        set wildignore+=vendor/rails/**
        set wildignore+=vendor/cache/**
        set wildignore+=*.gem
        set wildignore+=log/**
        set wildignore+=tmp/**
        set wildignore+=*.png,*.jpg,*.gif

        set wildmenu                        " better auto complete
        set wildmode=longest,list           " bash-like auto complete
        " set wildmode=list:longest
    """ }
""" }
""" general settings {
    set hidden
    set history=1000                "Store lots of :cmdline history
    set iskeyword+=_,$,@,%,# " not word dividers
    set laststatus=2 " always show statusline
    set linebreak " dont cut words on wrap
    set list listchars=tab:\ ▸\,trail:·,eol:¬ " highlight listchars
    set mouse= " disable mouse
    set noshowmode " hide mode cmd line
    set noexrc " dont use other .*rc(s)
    set nostartofline " keep cursor column pos
    set nowrap " dont wrap lines
    set numberwidth=5 " 99999 lines
    set shortmess+=I " disable startup message
    set splitbelow "splits go below w/focus
    set splitright " vsplits go right w/focus
    set ttyfast " for faster redraws
    """ folding {
        set foldcolumn=0 " hide folding column
        set foldmethod=indent " folds using indent
        set foldnestmax=10 " max 10 nested folds
        set foldlevelstart=99 "folds open by default
    """ }
    """ files {
        set autoread                    "Reload files changed outside vim
        set nobackup
        set nowb
        """ Persistent Undo {
        if has('persistent_undo')
            silent !mkdir ~/.vim/backups > /dev/null 2>&1
            set undodir=~/.vim/backups
            set undofile
            set undolevels=500
            set undoreload=10000
        endif
        """ }
    """ }
    """ text formating {
        set autoindent
        set ignorecase
        set smartcase
        set backspace=indent,eol,start  "Allow backspace in insert mode
        set smartindent
        set expandtab
        set shiftround
        set smarttab
        set shiftwidth=4
        set tabstop=4
        set softtabstop=4
        set nojoinspaces
    """ }
""" }
""" keybinds {
    """ general {
        " Remap <leader>
        let mapleader=","

        " disable ex mode
        nnoremap Q <nop>

        " yank/paste/delete to system keyboard
        noremap <leader>y "+y
        noremap <leader>d "+d
        noremap <leader>p "+p
        noremap <leader>P "+P

        " Treat wrapped lines as normal lines
        nnoremap j gj
        nnoremap k gk

        " Working ci(, works for both breaklined, inline and multiple ()
        nnoremap ci( %ci(
    """ }
""" }
