" -----------------------------------------------------------------------------
" vimrc
" Description: Config file for vim
" -----------------------------------------------------------------------------
" Location: $HOME/.vimrc
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" => Environment
" -----------------------------------------------------------------------------
" {{{
" vimconf is not vi-compatible
set nocompatible

" Set utf8 as standard encoding
set encoding=utf8

" Use unix as the standard file type
set ffs=unix,dos,mac

" Identify platform {{{
silent function! OSX()
    return has('macunix')
endfunction
silent function! LINUX()
    return has('unix') && !has('macunix') && !has('win32unix')
endfunction
silent function! WINDOWS()
    return  (has('win16') || has('win32') || has('win64'))
endfunction
" }}}
" }}}

" -----------------------------------------------------------------------------
" => Plugins
" -----------------------------------------------------------------------------
" {{{
" vim-plug plugin manager
call plug#begin('~/.vim/plugged')

" colorscheme
Plug 'nanotech/jellybeans.vim'

" buffers in tabline
Plug 'ap/vim-buftabline'

" netrw
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" split width fixer
Plug 'roman/golden-ratio'

" completion engine
Plug 'Shougo/neocomplete.vim'

" <Tab> everything
Plug 'ervandew/supertab'

" git wrapper
Plug 'tpope/vim-fugitive'

" quickrun
Plug 'thinca/vim-quickrun'

" registers!
Plug 'maxbrunsfeld/vim-yankstack'

" snippet engine and snippet repo 
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" repeat everything
Plug 'tpope/vim-repeat'

" universal set of defaults
Plug 'tpope/vim-sensible'

" extended tpope vimrc
" Plug 'tpope/vim-unimpaired'

" auto closes stuff
Plug 'jiangmiao/auto-pairs'

" surroundings
Plug 'tpope/vim-surround'

" comments!
Plug 'tpope/vim-commentary'

" align everything
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }

" silver surfer
Plug 'rking/ag.vim'

" racket language support
Plug 'wlangstroth/vim-racket', { 'for': ['racket'] }
command Racket !drracket %

" check syntax
Plug 'scrooloose/syntastic'

call plug#end()
" }}}

" -----------------------------------------------------------------------------
" => General
" -----------------------------------------------------------------------------
" {{{
" dont use other .*rc(s)
set noexrc

" Sets how many lines of history VIM has to remember
set history=1000
" Persistent Undo {{{
if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
    set undolevels=500
    set undoreload=10000
endif
" }}}

" Enable filetype plugins
filetype plugin indent on

" Conflicts when using mapleader so map space to \
" let mapleader = " "
map <space> <leader>
" }}}

" -----------------------------------------------------------------------------
" => VIM user interface
" -----------------------------------------------------------------------------
" {{{
" window title
set title
" disable startup message
set shortmess+=I
" A buffer becomes hidden when it is abandoned
set hidden

" disable mouse
set mouse=
" disable beep and flashing
set vb t_vb=

" line numbers are good
set number
" 99999 lines
set numberwidth=5
" hilight cursor line
set cursorline
" keep cursor column pos
set nostartofline

if has('cmdline_info')
    " show cmds being typed
    set showcmd
endif

if has('statusline')
    " always show statusline
    set laststatus=2
    " statusline formatting {{{
    " buffer number
    set statusline =%4*
    set statusline+=%4.4n
    set statusline+=%*

    " File name
    set statusline+=%1*

    set statusline+=\ %<%.99F\ 
    set statusline+=%*

    " help file flag
    set statusline+=%6*
    set statusline+=%h
    set statusline+=%*

    " modified flag
    set statusline+=%2*
    set statusline+=%m
    set statusline+=%*

    " read only flag
    set statusline+=%3*
    set statusline+=%{&ro?'[≠]':''} " '≠':'±'
    set statusline+=%*

    " display fugitive
    set statusline+=%4*
    set statusline+=%{fugitive#statusline()}
    set statusline+=%*

    " display a warning if fileformat isnt unix
    set statusline+=%5*
    set statusline+=%{&ff!='unix'?'[ff:\ '.&ff.']':''}
    set statusline+=%*

    " display a warning if file encoding isnt utf-8
    set statusline+=%5*
    set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'[ft:\ '.&fenc.']':''}
    set statusline+=%*

    " separate left/right side
    set statusline+=%1*
    set statusline+=%=
    set statusline+=%*

    " syntax checking
    set statusline+=%5*
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    " Cursor info
    set statusline+=%1*
    set statusline+=\ %c:%l
    set statusline+=\ %P\ 
    set statusline+=%*
    " }}}
endif

" display the current mode
set showmode
" ---more--- like less
set more

" fix scrolling
set scrolloff=8
set sidescrolloff=15
set sidescroll=1

" Configure backspace so it acts as it should act
set backspace=indent,eol,start
" Highlight problematic whitespace
set list listchars=tab:▸\ ,trail:•,extends:#,nbsp:.,eol:¬

" Ignore case when searching
set ignorecase
" When searching try to be smart about cases 
set smartcase
" Disables highlighting of search results
set nohlsearch
" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw 
" Faster redraws
set ttyfast

" For regular expressions turn magic on
set magic
" Search and replace
set gdefault

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=2
" matching for ci< or ci>
set matchpairs+=<:>

"splits go below w/focus
set splitbelow
" vsplits go right w/focus
set splitright

" fix default folding
set foldlevelstart=0
" hide folding column
set foldcolumn=0 
" folds using syntax
set foldmethod=marker
" max 10 nested folds
set foldnestmax=10
" folds open by default
" set foldlevelstart=99
" folds closed by default
set foldlevelstart=1
" toggle folds with space
nnoremap <Enter> za

" better auto complete
set wildmenu
" bash-like auto complete
set wildmode=longest,list,full
" dont display these kinds of files in wildmenu {{{
set wildignore=*~
" vim temp files
set wildignore+=*.swp,*.swo
" git
set wildignore+=*.git
" Unix
set wildignore+=*/tmp/*,*.so,*DS_Store*,*.dmg
" Windows
set wildignore+=*\\tmp\\*,*.exe
" c
set wildignore+=*.a,*.o,*.so,*.obj
" python
set wildignore+=*.pyc
" docs
set wildignore+=*.pdf
" archives
set wildignore+=*.zip
" pictures
set wildignore+=*.png,*.jpg,*.jpeg,*.gif
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
" }}}
" }}}

" -----------------------------------------------------------------------------
" => Colors
" -----------------------------------------------------------------------------
" {{{
" Enable syntax highlighting
syntax on

" we're using a dark bg
set background=dark

" jellybeans syntax with my xres colors
set t_Co=16
colorscheme jellybeans
" Jellybeans fixes
highlight ModeMsg ctermfg=green
highlight Folded ctermfg=darkcyan
highlight LineNr ctermfg=darkgrey
highlight SignColumn ctermbg=NONE
" Statusline colors
highlight StatusLine ctermbg=black
highlight User1 ctermbg=black ctermfg=white
highlight User2 ctermbg=black ctermfg=cyan
highlight User3 ctermbg=black ctermfg=darkyellow
highlight User4 ctermbg=black ctermfg=darkmagenta
highlight User5 ctermbg=black ctermfg=red
highlight User6 ctermbg=black ctermfg=grey
" buftabline colors
highlight BufTabLineCurrent ctermbg=black ctermfg=darkmagenta


" highlight col >= 80
" augroup vimrc_autocmds
  " autocmd BufEnter * highlight OverLength ctermbg=darkred guibg=#592929
  " autocmd BufEnter * match OverLength /\%81v.*/
" augroup END
" }}}

" -----------------------------------------------------------------------------
" => Files, backups and undo
" -----------------------------------------------------------------------------
" {{{
" Set to auto read when a file is changed from the outside
set autoread
set nobackup
set nowb

" formating for other filetypes
augroup FileTypeRules
    autocmd!
    autocmd BufNewFile,BufRead *.conf set ft=cfg tw=79
    autocmd BufNewFile,BufRead *.md set ft=markdown tw=79
    autocmd BufNewFile,BufRead *.tex set ft=tex tw=79
    autocmd BufNewFile,BufRead *.txt set ft=sh tw=79
augroup END

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
" }}}

" -----------------------------------------------------------------------------
" => Text, tab and indent
" -----------------------------------------------------------------------------
" {{{
" spaces instead of tabs
set expandtab
" Be smart when using tabs ;)
set smarttab

" indent stuff
set autoindent
set smartindent
set shiftround

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=4
set nojoinspaces

" not word dividers
set iskeyword+=_,$,@,%,#

" dont wrap lines
set nowrap
" dont cut words on wrap
set linebreak
" autowrap with newline char
set formatoptions+=t
" autowrap length is 79 col
" set tw=79
" }}}

" -----------------------------------------------------------------------------
" => Movement, tabs, windows, buffers, and registers
" -----------------------------------------------------------------------------
" {{{
" Treat wrapped lines as normal lines
nnoremap j gj
nnoremap k gk

" Working ci(, works for both breaklined, inline and multiple ()
nnoremap ci( %ci(

" yank/paste/delete to system clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
" possibly increase compat with mac / windows
    " if has('clipboard')
        " if has('unnamedplus')  " When possible use + register for copy-paste
            " set clipboard=unnamed,unnamedplus
        " else         " On mac and Windows, use * register for copy-paste
            " set clipboard=unnamed
        " endif
    " endif

" Automatically switch to file directory of buffer
autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
" Switch CWD to the directory of the open buffer
" map <leader>cd :cd %:p:h<cr>:pwd<cr>

" close buffers
map <leader>q :bd<cr>
map <leader>Q :bd!<cr>

" quickly switch between buffers
noremap <leader>b :ls<cr>:b<space>
noremap <leader>[ :bprevious<cr>
noremap <leader>] :bnext<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>
    " CmdLine && VisualSelection {{{
    function! CmdLine(str)
        exe "menu Foo.Bar :" . a:str
        emenu Foo.Bar
        unmenu Foo
    endfunction 

    function! VisualSelection(direction, extra_filter) range
        let l:saved_reg = @"
        execute "normal! vgvy"

        let l:pattern = escape(@", '\\/.*$^~[]')
        let l:pattern = substitute(l:pattern, "\n$", "", "")

        if a:direction == 'b'
            execute "normal ?" . l:pattern . "^M"
        elseif a:direction == 'gv'
            call CmdLine("Ag \"" . l:pattern . "\" " )
        elseif a:direction == 'replace'
            call CmdLine("%s" . '/'. l:pattern . '/')
        elseif a:direction == 'f'
            execute "normal /" . l:pattern . "^M"
        endif

        let @/ = l:pattern
        let @" = l:saved_reg
    endfunction
    " }}}
" }}}

" -----------------------------------------------------------------------------
" => Edit mappings
" -----------------------------------------------------------------------------
" {{{
" disable ex mode
nnoremap Q <nop>

" Remap VIM 0 to first non-blank character
map 0 ^
" }}}

" -----------------------------------------------------------------------------
" => Plugin Settings
" -----------------------------------------------------------------------------
" {{{
    " -------------------------------------------------------------
    " => buftabline
    " -------------------------------------------------------------
    " {{{
    let g:buftabline_show = 1
    let g:buftabline_indicators = 1
    " }}}

    " -------------------------------------------------------------
    " => NERDTree
    " -------------------------------------------------------------
    " {{{
    map <leader>t :NERDTreeToggle<CR>
    " }}}

    " -------------------------------------------------------------
    " => ultisnip
    " -------------------------------------------------------------
    " {{{
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
    let g:UltiSnipsEditSplit="vertical"
    " }}}

    " -------------------------------------------------------------
    " => syntastic
    " -------------------------------------------------------------
    " {{{
    let g:syntastic_always_populate_loc_list = 1
    " let g:syntastic_auto_loc_list = 1
    let g:syntastic_cpp_check_header = 1
    let g:syntastic_cpp_compiler_options = ' -std=c++0x'
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 1
    " }}}

    " -------------------------------------------------------------
    " => neocomplete
    " -------------------------------------------------------------
    " {{{
    let g:acp_enableAtStartup = 0 " Disable AutoComplPop.
    let g:neocomplete#enable_at_startup = 1 " Use neocomplete.
    let g:neocomplete#enable_smart_case = 1 " Use smartcase.
    let g:neocomplete#sources#syntax#min_keyword_length = 3 " Set minimum syntax keyword length.
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    " }}}

    " -------------------------------------------------------------
    " => yankstack
    " -------------------------------------------------------------
    " {{{
    let g:yankstack_map_keys = 0
    nmap <C-p> <Plug>yankstack_substitute_older_paste
    nmap <C-P> <Plug>yankstack_substitute_newer_paste
    " }}}

    " -------------------------------------------------------------
    " => ag
    " -------------------------------------------------------------
    " {{{
    " Open Ag and put the cursor in the right position
    map <leader>a :Ag! 
    " }}}

    " -------------------------------------------------------------
    " => easyalign
    " -------------------------------------------------------------
    " {{{
    vmap <Enter> <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)
    " }}}

    " -------------------------------------------------------------
    " => netrw - bundled file browser
    " -------------------------------------------------------------
    " {{{
    let g:netrw_banner = 0
    let g:netrw_list_hide = '^\.$'
    let g:netrw_liststyle = 3
    " }}}
" }}}

" vim:foldmethod=marker:foldlevel=0
