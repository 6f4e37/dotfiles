" -----------------------------------------------------------------------------
" vimrc
" Description: Config file for vim
" -----------------------------------------------------------------------------
" Location: $HOME/.vimrc
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" => Environment
" -----------------------------------------------------------------------------
" {{{
" vimconf is not vi-compatible
set nocompatible

" Set utf8 as standard encoding
set encoding=utf8

" Use unix as the standard file type
set ffs=unix,dos,mac
" }}}

" -----------------------------------------------------------------------------
" => Plugins
" -----------------------------------------------------------------------------
" {{{
" vim-plug plugin manager
call plug#begin('~/.vim/plugged')

" colorscheme
Plug 'nanotech/jellybeans.vim'

" buffers in tabline
Plug 'ap/vim-buftabline'

" netrw
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" split width fixer
Plug 'roman/golden-ratio'

" completion engine
Plug 'Shougo/neocomplete.vim'

" <Tab> everything
Plug 'ervandew/supertab'

" snippet engine and snippet repo 
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" universal set of defaults
Plug 'tpope/vim-sensible'

" repeat everything
Plug 'tpope/vim-repeat'

" auto closes stuff
Plug 'jiangmiao/auto-pairs'

" auto closes stuff
Plug 'tpope/vim-endwise'

" surroundings
Plug 'tpope/vim-surround'

" comments!
Plug 'tpope/vim-commentary', { 'on': '<Plug>Commentary' }

" align everything
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }

" racket language support
Plug 'wlangstroth/vim-racket', { 'for': ['racket'] }

" check syntax
Plug 'scrooloose/syntastic'

" ag
Plug 'mileszs/ack.vim', {'on': ['Ack', 'AckWindow'] }

call plug#end()
" }}}

" -----------------------------------------------------------------------------
" => General
" -----------------------------------------------------------------------------
" {{{
" dont use other .*rc(s)
set noexrc

" Sets how many lines of history VIM has to remember
set history=1000
" Persistent Undo {{{
if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
    set undolevels=500
    set undoreload=10000
endif
" }}}

" Enable filetype plugins
filetype plugin indent on

" Conflicts when using mapleader so map space to \
map <space> <leader>
" }}}

" -----------------------------------------------------------------------------
" => VIM user interface
" -----------------------------------------------------------------------------
" {{{
" window title
set title
" disable startup message
set shortmess+=I
" A buffer becomes hidden when it is abandoned
set hidden

" disable mouse
set mouse=
" disable beep and flashing
set vb t_vb=

" line numbers are good
set number
" 99999 lines
set numberwidth=5
" hilight cursor line
set cursorline
" keep cursor column pos
set nostartofline

if has('cmdline_info')
    " show cmds being typed
    set showcmd
endif

if has('statusline')
    " always show statusline
    set laststatus=2
    " statusline formatting {{{
    " buffer number
    set statusline =%4*
    set statusline+=%4.4n
    set statusline+=%*

    " File name
    set statusline+=%1*

    set statusline+=\ %<%.99F\ 
    set statusline+=%*

    " help file flag
    set statusline+=%6*
    set statusline+=%h
    set statusline+=%*

    " modified flag
    set statusline+=%2*
    set statusline+=%m
    set statusline+=%*

    " read only flag
    set statusline+=%3*
    set statusline+=%{&ro?'[≠]':''} " '≠':'±'
    set statusline+=%*

    " display fugitive
    " set statusline+=%4*
    " set statusline+=[%{fugitive#head(6)}]
    " set statusline+=%*

    " display a warning if fileformat isnt unix
    set statusline+=%5*
    set statusline+=%{&ff!='unix'?'[ff:\ '.&ff.']':''}
    set statusline+=%*

    " display a warning if file encoding isnt utf-8
    set statusline+=%5*
    set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'[ft:\ '.&fenc.']':''}
    set statusline+=%*

    " separate left/right side
    set statusline+=%1*
    set statusline+=%=
    set statusline+=%*

    " syntax checking
    set statusline+=%5*
    set statusline+=%{exists('g:loaded_syntastic_plugin')?SyntasticStatuslineFlag():''}
    set statusline+=%*

    " Cursor info
    set statusline+=%1*
    set statusline+=\ %c:%l
    set statusline+=\ %P\ 
    set statusline+=%*
    " }}}
endif

" display the current mode
set showmode
" ---more--- like less
set more

" fix scrolling
set scrolloff=8
set sidescrolloff=15
set sidescroll=1

" Configure backspace so it acts as it should act
set backspace=indent,eol,start
" Highlight problematic whitespace
set list listchars=tab:▸\ ,trail:•,extends:#,nbsp:.,eol:¬

" Ignore case when searching
set ignorecase
" When searching try to be smart about cases
set smartcase
" Disables highlighting of search results
set nohlsearch
" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw 
" Faster redraws
set ttyfast

" For regular expressions turn magic on
set magic
" Search and replace
set gdefault

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=2
" matching for ci< or ci>
set matchpairs+=<:>

"splits go below w/focus
set splitbelow
" vsplits go right w/focus
set splitright

" fix default folding
set foldlevelstart=0
" hide folding column
set foldcolumn=0 
" folds using syntax
set foldmethod=marker
" max 10 nested folds
set foldnestmax=10
" folds open by default
" set foldlevelstart=99
" folds closed by default
set foldlevelstart=1
" toggle folds with enter
nnoremap <Enter> za

" better auto complete
set wildmenu
" bash-like auto complete
set wildmode=longest,list,full
" dont display these kinds of files in wildmenu {{{
set wildignore=*~
" vim temp files
set wildignore+=*.swp,*.swo
" git
set wildignore+=*.git
" Unix
set wildignore+=*/tmp/*,*.so,*DS_Store*,*.dmg
" Windows
set wildignore+=*\\tmp\\*,*.exe
" c
set wildignore+=*.a,*.o,*.so,*.obj
" python
set wildignore+=*.pyc
" docs
set wildignore+=*.pdf
" archives
set wildignore+=*.zip
" pictures
set wildignore+=*.png,*.jpg,*.jpeg,*.gif
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
" }}}
" }}}

" -----------------------------------------------------------------------------
" => Colors
" -----------------------------------------------------------------------------
" {{{
" Enable syntax highlighting
syntax on

" we're using a dark bg
set background=dark

" jellybeans syntax with my xres colors
set t_Co=16
colorscheme jellybeans
" Jellybeans fixes
highlight ModeMsg ctermfg=green
highlight Folded ctermfg=darkcyan
highlight LineNr ctermfg=darkgrey
highlight SignColumn ctermbg=NONE
" Statusline colors
highlight StatusLine ctermbg=black
highlight User1 ctermbg=black ctermfg=white
highlight User2 ctermbg=black ctermfg=cyan
highlight User3 ctermbg=black ctermfg=darkyellow
highlight User4 ctermbg=black ctermfg=darkmagenta
highlight User5 ctermbg=black ctermfg=red
highlight User6 ctermbg=black ctermfg=grey
" buftabline colors
highlight BufTabLineCurrent ctermbg=black ctermfg=darkmagenta
" }}}

" -----------------------------------------------------------------------------
" => Files, backups and undo
" -----------------------------------------------------------------------------
" {{{
" Set to auto read when a file is changed from the outside
set autoread
set nobackup
set nowb

" formating for other filetypes
augroup FileTypeRules
    autocmd!
    autocmd BufNewFile,BufRead *.txt     setl ft=sh       tw=72
    autocmd BufNewFile,BufRead *.md      setl ft=markdown tw=72
    autocmd BufNewFile,BufRead *.conf    setl ft=cfg      tw=79
    autocmd BufNewFile,BufRead *.tex     setl ft=tex      tw=79
    autocmd BufNewFile,BufRead *.py      setl et ai       tw=79 ts=4 sts=4 sw=4
    autocmd Filetype           gitcommit setl spell       tw=72
augroup END

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py     :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
" }}}

" -----------------------------------------------------------------------------
" => Text, tab and indent
" -----------------------------------------------------------------------------
" {{{
" spaces instead of tabs
set expandtab
" Be smart when using tabs ;)
set smarttab

" indent stuff
set autoindent
set smartindent
set shiftround

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=4
set nojoinspaces

" not word dividers
set iskeyword+=_,$,@,%,#

" dont wrap lines
set nowrap
" dont cut words on wrap
set linebreak
" autowrap with newline char
set formatoptions+=t
" }}}

" -----------------------------------------------------------------------------
" => Movement, tabs, windows, buffers, and registers
" -----------------------------------------------------------------------------
" {{{
" Buffers
noremap <leader>b :ls<cr>:b<space>
noremap <leader>[ :bprevious<cr>
noremap <leader>] :bnext<cr>

" Automatically switch to file directory of buffer
autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif

" windows
map <leader>s <C-W>s
map <leader>v <C-W>v
map <leader>q <C-W>q

" Move between windows
map <leader>h <C-W>h
map <leader>j <C-W>j
map <leader>k <C-W>k
map <leader>l <C-W>l

" location
noremap <leader>l[ :lprevious<cr>
noremap <leader>l] :lnext<cr>

" Edit Helpers http://vimcasts.org/e/14
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" Treat wrapped lines as normal lines
nnoremap j gj
nnoremap k gk

" Change Y to be consistent with C and D
nnoremap Y y$

" yank/paste/delete to system clipboard
nnoremap <Leader>y "+y
vnoremap <Leader>y "+y
nnoremap <Leader>yy "+yy
nnoremap <Leader>Y "+y$
nnoremap <Leader>d "+d
nnoremap <Leader>dd "+dd
nnoremap <Leader>D "+D
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Working ci(, works for both breaklined, inline and multiple ()
nnoremap ci( %ci(
" }}}

" -----------------------------------------------------------------------------
" => Edit mappings
" -----------------------------------------------------------------------------
" {{{
" disable ex mode
nnoremap Q <nop>

" disable keyword man page
nnoremap K <nop>
" }}}

" -----------------------------------------------------------------------------
" => Plugin Settings
" -----------------------------------------------------------------------------
" {{{
    " -------------------------------------------------------------
    " => buftabline
    " -------------------------------------------------------------
    " {{{
    let g:buftabline_show = 1
    let g:buftabline_indicators = 1
    " }}}

    " -------------------------------------------------------------
    " => NERDTree
    " -------------------------------------------------------------
    " {{{
    map <leader>t :NERDTreeToggle<CR>
    " }}}

    " -------------------------------------------------------------
    " => ultisnip
    " -------------------------------------------------------------
    " {{{
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
    let g:UltiSnipsEditSplit="vertical"
    " }}}

    " -------------------------------------------------------------
    " => Commentary
    " -------------------------------------------------------------
    " {{{
    xmap <leader>c  <Plug>Commentary
    nmap <leader>c  <Plug>Commentary
    omap <leader>c  <Plug>Commentary
    nmap <leader>cc <Plug>CommentaryLine
    nmap c<leader>c <Plug>ChangeCommentary
    nmap <leader>cu <Plug>Commentary<Plug>Commentary
    " }}}

    " -------------------------------------------------------------
    " => syntastic
    " -------------------------------------------------------------
    " {{{
    " Settings
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_aggregate_errors = 1
    let g:syntastic_enable_highlighting = 0

    " Formatting
    let g:syntastic_loc_list_height = 8
    let g:syntastic_stl_format = "[%E{Err: %e, line %fe}%B{ / }%W{Warn: %w, line %fw}]"

    " Syntax mode by filetype
    let g:syntastic_mode_map = {
        \ 'mode': 'passive',
        \ 'active_filetypes': ['c', 'javascript', 'coffee', 'cpp', 'rust', 'ruby']}

    " file type settings
    let g:syntastic_c_check_header          = 0
    let g:syntastic_c_compiler_options      = ' -Wextra -Wall'
    let g:syntastic_c_remove_include_errors = 1
    let g:syntastic_cpp_compiler_options    = ' -Wextra -Wall -std=c++11'

    " mappings
    nmap <leader>ec :SyntasticCheck<CR>
    " }}}

    " -------------------------------------------------------------
    " => neocomplete
    " -------------------------------------------------------------
    " {{{
    let g:acp_enableAtStartup = 0 " Disable AutoComplPop.
    let g:neocomplete#enable_at_startup = 1 " Use neocomplete.
    let g:neocomplete#enable_smart_case = 1 " Use smartcase.
    let g:neocomplete#sources#syntax#min_keyword_length = 3 " Set minimum syntax keyword length.
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    " }}}

    " -------------------------------------------------------------
    " => easyalign
    " -------------------------------------------------------------
    " {{{
    nmap <leader>a <Plug>(EasyAlign)
    xmap <leader>a <Plug>(EasyAlign)
    " }}}

    " -------------------------------------------------------------
    " => ag
    " -------------------------------------------------------------
    " {{{
    if executable('ag')
        let g:ackprg = 'ag --vimgrep'
    endif
    cnoreabbrev ag Ack!
    cnoreabbrev agw AckWindow!
    " }}}

    " -------------------------------------------------------------
    " => netrw - bundled file browser
    " -------------------------------------------------------------
    " {{{
    let g:netrw_banner = 0
    let g:netrw_list_hide = '^\.$'
    let g:netrw_liststyle = 3
    " }}}
" }}}

" vim:foldmethod=marker:foldlevel=0
