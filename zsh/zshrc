# -----------------------------------------------------------------------------
# zshrc
# Description: Config file for zsh
# -----------------------------------------------------------------------------
# Location: $HOME/.zshrc
# -----------------------------------------------------------------------------

# startx at login
[[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && exec startx

# -----------------------------------------------------------------------------
# => General
# -----------------------------------------------------------------------------
# {{{
# Set path
export PATH="$HOME/.bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/bin/core_perl"

# Make UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# Hardware acceleration
export VDPAU_DRIVER=va_gl

# Allow brace character class list expansion.
setopt BRACE_CCL
# Combine zero-length punctuation characters (accents) with the base character.
setopt COMBINING_CHARS
# Allow 'Henry''s Garage' instead of 'Henry'\''s Garage'.
setopt RC_QUOTES
# Don't error if globbing fails
setopt NONOMATCH
# Don't print a warning message if a mail file has been accessed.
unsetopt MAIL_WARNING
# List jobs in the long format by default.
setopt LONG_LIST_JOBS
# Attempt to resume existing job before creating a new process.
setopt AUTO_RESUME
# Report status of background jobs immediately.
setopt NOTIFY
# Don't run all background jobs at a lower priority.
unsetopt BG_NICE
# Don't kill jobs on shell exit.
unsetopt HUP
# Don't report on jobs when shell exit.
unsetopt CHECK_JOBS

# History
HISTSIZE=2000
SAVEHIST=2000
HISTFILE="$HOME/.dotfiles/zsh/history"
setopt hist_ignore_dups
setopt inc_append_history
setopt share_history

# Default Programs
export BROWSER='firefox'
export EDITOR='vim'
export VISUAL='vim'
export TERMINAL='urxvtc'

# Less options.
export LESS='-F -g -i -M -R -S -w -X -z-4'
# }}}

# -----------------------------------------------------------------------------
# => Plugins
# -----------------------------------------------------------------------------
# {{{
# Substring Search
source "$HOME/.dotfiles/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh"
source "$HOME/.dotfiles/zsh/plugins/search.zsh"

# enable zsh completion menu
fpath=($HOME/.dotfiles/zsh/plugins/zsh-completions/src $fpath)
source "$HOME/.dotfiles/zsh/plugins/completion.zsh"

# Smart URLs
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic
# }}}

# -----------------------------------------------------------------------------
# => Keybinds
# -----------------------------------------------------------------------------
# {{{
# vi-like key bindings
bindkey -v
export KEYTIMEOUT=1

# Fix unmapped keys
# bindkey '\e[2~' quoted-insert # ins
bindkey '\e[3~' delete-char # del
bindkey '\e[7~' beginning-of-line # home
bindkey '\e[8~' end-of-line # end
bindkey '\e[5~' beginning-of-history # pg up
bindkey '\e[6~' end-of-history # pg down
# }}}

# -----------------------------------------------------------------------------
# => Colors
# -----------------------------------------------------------------------------
# {{{
# enable coloring
autoload -U colors && colors

# use gcc colors
export GCC_COLORS=1

# force colors
alias ls='ls --color=auto -hrtF'
alias lsa='ls --color=auto -oghrtF'
alias grep='grep --color=auto'
# }}}

# -----------------------------------------------------------------------------
# => Prompt
# -----------------------------------------------------------------------------
# {{{
PROMPT="%(?.%{$fg[cyan]%}.%{$fg[red]%})[%{$fg[white]%} %~ %(?.%{$fg[cyan]%}.%{$fg[red]%})] %{$reset_color%}"
RPROMPT=""

function current_branch() {
  local ref
  ref=$(git symbolic-ref --quiet HEAD 2> /dev/null)
  local ret=$?
  if [[ $ret != 0 ]]; then
    [[ $ret == 128 ]] && return  # no git repo.
    ref=$(git rev-parse --short HEAD 2> /dev/null) || return
  fi
  echo "%{$fg[white]%} [% %{$fg[magenta]%}${ref#refs/heads/}%{$fg[white]%}]% %{$reset_color%}"
}

function zle-line-init zle-keymap-select {
    GIT_PROMPT=$(current_branch)
    ERROR_REPORT="%{$fg[red]%} ━%{$reset_color%}"
    VIM_PROMPT="%{$fg[white]%} [% normal]% %{$reset_color%}"
    RPS1="%(?.${${KEYMAP/(vicmd|opp)/$VIM_PROMPT$GIT_PROMPT}/(main|viins)/$GIT_PROMPT}.${${KEYMAP/(vicmd|opp)/$VIM_PROMPT$GIT_PROMPT$ERROR_REPORT}/(main|viins)/$GIT_PROMPT$ERROR_REPORT})"
    zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select
# }}}

# -----------------------------------------------------------------------------
# => Aliases and functions
# -----------------------------------------------------------------------------
# {{{
# Headaches
alias quit='exit'
alias :q='quit'
alias pls='sudo $(fc -ln -1)'

# Shortforms
alias c='clear'
alias s='sudo'

# make use of systemcl more friendly
function sstart()   { sudo systemctl start $@;   }
function srestart() { sudo systemctl restart $@; }
function senable()  { sudo systemctl enable $@;  }
function sdisable() { sudo systemctl disable $@; }
function sstatus()  { sudo systemctl status $@; }

# Add 'protection'
alias rm='rm -I'
alias cp='cp -vi'
alias mv='mv -i'

# Add sudo
alias mount='sudo mount'
alias umount='sudo umount'

# Directories
alias ..='cd ..'
alias ...='cd ../..'
# auto-ls after changing directory
cd () {
    builtin cd $@ && ls -hrtF
}
# make dir and cd into it
function mkcd ()
{
    mkdir -p "$@" && eval cd "\"\$$#\"";
}

# Pacman / Pacaur
alias syugit='pacaur -Syu --devel --needed'

# Network
alias ping="ping -c 3"
alias vpn='sudo openvpn --config ~/.vpn/AirVPN_Canada_UDP-2018.ovpn'
alias vpnu='sudo openvpn --config ~/.vpn/AirVPN_United-States_UDP-2018.ovpn'

# Pipes & more
alias -g BG='& exit'
alias -g N='> /dev/null'
alias -g L='| less'
alias -g M='| more'
alias -g G='| grep'
alias -g V='| vim -'

# Program Specific
alias livestreamer='livestreamer -p mpv'
alias xboard-stockfish='xboard -fUCI -fcp stockfish -sUCI -scp stockfish'
alias sxiv='sxiv -b'

# passwords
alias keys='kpcli --kdb /home/godo/docs/pass/cats'

# easier extraction
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2) tar xvjf $1;;
            *.tar.gz) tar xvzf $1;;
            *.bz2) bunzip2 $1;;
            *.rar) unrar x $1;;
            *.gz) gunzip $1;;
            *.tar) tar xvf $1;;
            *.tbz2) tar xvjf $1;;
            *.tgz) tar xvzf $1;;
            *.zip) unzip $1;;
            *.Z) uncompress $1;;
            *.7z) 7za x $1;;
            *) echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# imgur
function imgur() {
    url=$1
    if [ -z "$url" ]; then
        echo "imgur requires a valid url"
        echo "syntax: imgur url (name)?"
    else
        user=$2
        if [ -z "$user" ]; then
            $user="unknown"
            echo "no user found, setting user to unknown"
        fi
        pictures="/home/godo/pics/imgur"
        date=`date +%b-%d-%Y`
        album=`echo $url | sed -r 's/^(http\:\/\/)?imgur\.com(\/a\/)?//'`
        folder="$pictures/$user/$date - $album"

        python $pictures/imguralbum.py $url $folder
        echo `touch "$folder/permalink.txt"`
        echo "$url" >> "$folder/permalink.txt"
        echo "permalink: $folder/permalink.txt"
    fi
}
# }}}

# vim:foldmethod=marker:foldlevel=0
